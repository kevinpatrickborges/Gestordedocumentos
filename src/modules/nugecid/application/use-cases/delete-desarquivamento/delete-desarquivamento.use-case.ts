import { Injectable, Inject, Logger } from '@nestjs/common';
import {
  DesarquivamentoDomain,
  DesarquivamentoId,
  IDesarquivamentoRepository,
} from '../../../domain';
import { DESARQUIVAMENTO_REPOSITORY_TOKEN } from '../../../domain/nugecid.constants';

export interface DeleteDesarquivamentoRequest {
  id: number;
  userId: number;
  userRoles: string[];
  permanent?: boolean; // Para hard delete (apenas admins)
}

export interface DeleteDesarquivamentoResponse {
  success: boolean;
  message: string;
  deletedAt?: Date;
}

@Injectable()
export class DeleteDesarquivamentoUseCase {
  private readonly logger = new Logger(DeleteDesarquivamentoUseCase.name);

  constructor(
    @Inject(DESARQUIVAMENTO_REPOSITORY_TOKEN)
    private readonly desarquivamentoRepository: IDesarquivamentoRepository,
  ) {}

  async execute(
    request: DeleteDesarquivamentoRequest,
  ): Promise<DeleteDesarquivamentoResponse> {
    const timestamp = new Date().toISOString();
    this.logger.log(`\n=== IN√çCIO DA EXCLUS√ÉO DE DESARQUIVAMENTO ===`);
    this.logger.log(`[DELETE_USE_CASE] ${timestamp} - Iniciando exclus√£o`);
    this.logger.log(
      `[DELETE_USE_CASE] Par√¢metros: ID=${request.id}, Usu√°rio=${request.userId}, Permanente=${request.permanent}`,
    );
    this.logger.log(
      `[DELETE_USE_CASE] Roles do usu√°rio: ${JSON.stringify(request.userRoles)}`,
    );

    // Validar entrada
    this.validateRequest(request);
    this.logger.log(`[DELETE_USE_CASE] ‚úÖ Valida√ß√£o de entrada conclu√≠da`);

    // Buscar desarquivamento existente (incluindo soft-deleted para verifica√ß√£o de permiss√µes)
    this.logger.log(
      `[DELETE_USE_CASE] üîç Tentando criar DesarquivamentoId com valor: ${request.id} (tipo: ${typeof request.id})`,
    );

    let desarquivamentoId: DesarquivamentoId;
    try {
      desarquivamentoId = DesarquivamentoId.create(request.id);
      this.logger.log(
        `[DELETE_USE_CASE] ‚úÖ DesarquivamentoId criado com sucesso: ${desarquivamentoId.value}`,
      );
    } catch (error) {
      this.logger.error(
        `[DELETE_USE_CASE] ‚ùå ERRO ao criar DesarquivamentoId: ${error.message}`,
      );
      this.logger.error(
        `[DELETE_USE_CASE] ‚ùå Valor recebido: ${request.id} (tipo: ${typeof request.id})`,
      );
      throw new Error(`ID inv√°lido: ${error.message}`);
    }

    this.logger.log(
      `[DELETE_USE_CASE] Buscando desarquivamento ID: ${request.id}`,
    );
    this.logger.log(
      `[DELETE_USE_CASE] üîç BUSCANDO DESARQUIVAMENTO - Tentando encontrar registro com ID: ${request.id}`,
    );

    const desarquivamento =
      await this.desarquivamentoRepository.findByIdWithDeleted(
        desarquivamentoId,
      );

    this.logger.log(
      `[DELETE_USE_CASE] üìä RESULTADO DA BUSCA: ${
        desarquivamento
          ? `ENCONTRADO - ID: ${desarquivamento.id?.value}`
          : 'N√ÉO ENCONTRADO'
      }`,
    );

    if (!desarquivamento) {
      this.logger.error(
        `[DELETE_USE_CASE] ‚ùå ERRO: Desarquivamento com ID ${request.id} n√£o encontrado`,
      );
      this.logger.error(`[DELETE_USE_CASE] ‚ùå POSS√çVEIS CAUSAS:`);
      this.logger.error(
        `[DELETE_USE_CASE] ‚ùå 1. ID n√£o existe no banco de dados`,
      );
      this.logger.error(
        `[DELETE_USE_CASE] ‚ùå 2. Problema na convers√£o de ID (${typeof request.id})`,
      );
      this.logger.error(
        `[DELETE_USE_CASE] ‚ùå 3. Problema na query do reposit√≥rio`,
      );
      throw new Error(`Desarquivamento com ID ${request.id} n√£o encontrado`);
    }

    this.logger.log(`[DELETE_USE_CASE] ‚úÖ Desarquivamento encontrado:`);
    this.logger.log(`[DELETE_USE_CASE]   - ID: ${desarquivamento.id?.value}`);
    this.logger.log(
      `[DELETE_USE_CASE]   - NIC/Laudo: ${desarquivamento.numeroNicLaudoAuto || 'N/A'}`,
    );
    this.logger.log(
      `[DELETE_USE_CASE]   - Status: ${desarquivamento.status?.value}`,
    );
    this.logger.log(
      `[DELETE_USE_CASE]   - J√° exclu√≠do: ${desarquivamento.isDeleted() ? 'SIM' : 'N√ÉO'}`,
    );

    // Verificar se j√° foi exclu√≠do (para soft delete)
    if (desarquivamento.isDeleted() && !request.permanent) {
      this.logger.log(
        `[DELETE_USE_CASE] ‚ö†Ô∏è Desarquivamento ${request.id} j√° estava exclu√≠do`,
      );
      return {
        success: true,
        message: 'Desarquivamento j√° estava exclu√≠do',
        deletedAt: desarquivamento.deletedAt,
      };
    }

    // Verificar permiss√µes
    this.logger.log(
      `[DELETE_USE_CASE] üîê Verificando permiss√µes para usu√°rio ${request.userId}`,
    );
    this.checkPermissions(
      desarquivamento,
      request.userId,
      request.userRoles,
      request.permanent,
    );
    this.logger.log(`[DELETE_USE_CASE] ‚úÖ Permiss√µes verificadas com sucesso`);

    // Executar exclus√£o
    if (request.permanent) {
      this.logger.log(
        `[DELETE_USE_CASE] üóëÔ∏è Executando EXCLUS√ÉO PERMANENTE para ID: ${request.id}`,
      );
      return await this.performHardDelete(desarquivamento);
    } else {
      this.logger.log(
        `[DELETE_USE_CASE] üì¶ Executando SOFT DELETE para ID: ${request.id}`,
      );
      return await this.performSoftDelete(desarquivamento, request.userId);
    }
  }

  private validateRequest(request: DeleteDesarquivamentoRequest): void {
    // Validar ID
    if (!request.id || request.id <= 0 || !Number.isInteger(request.id)) {
      throw new Error('ID deve ser um n√∫mero inteiro positivo');
    }

    // Validar usu√°rio
    if (!request.userId || request.userId <= 0) {
      throw new Error('ID do usu√°rio √© obrigat√≥rio');
    }

    if (!request.userRoles || !Array.isArray(request.userRoles)) {
      throw new Error('Roles do usu√°rio s√£o obrigat√≥rias');
    }
  }

  private checkPermissions(
    desarquivamento: DesarquivamentoDomain,
    userId: number,
    userRoles: string[],
    permanent?: boolean,
  ): void {
    const upperCaseUserRoles = userRoles.map(role => role.toUpperCase());

    this.logger.log(`[DELETE_USE_CASE] üîê VERIFICANDO PERMISS√ïES:`);
    this.logger.log(`[DELETE_USE_CASE] üîê Usu√°rio ID: ${userId}`);
    this.logger.log(
      `[DELETE_USE_CASE] üîê Roles: [${upperCaseUserRoles.join(', ')}]`,
    );
    this.logger.log(
      `[DELETE_USE_CASE] üîê Desarquivamento ID: ${desarquivamento.id?.value}`,
    );
    this.logger.log(
      `[DELETE_USE_CASE] üîê Criado por: ${desarquivamento.criadoPorId}`,
    );
    this.logger.log(
      `[DELETE_USE_CASE] üîê Respons√°vel: ${desarquivamento.responsavelId || 'N/A'}`,
    );
    this.logger.log(
      `[DELETE_USE_CASE] üîê Status: ${desarquivamento.status?.value}`,
    );
    this.logger.log(
      `[DELETE_USE_CASE] üîê Exclus√£o permanente: ${permanent ? 'SIM' : 'N√ÉO'}`,
    );

    // Verificar se pode ser exclu√≠do (usando m√©todo espec√≠fico)
    const canDelete = desarquivamento.canBeDeletedBy(userId, userRoles);
    this.logger.log(
      `[DELETE_USE_CASE] üîê Pode excluir? ${canDelete ? 'SIM' : 'N√ÉO'}`,
    );

    if (!canDelete) {
      this.logger.error(`[DELETE_USE_CASE] ‚ùå PERMISS√ÉO NEGADA - Detalhes:`);
      this.logger.error(
        `[DELETE_USE_CASE] ‚ùå - Usu√°rio ${userId} n√£o tem permiss√£o para excluir`,
      );
      this.logger.error(
        `[DELETE_USE_CASE] ‚ùå - Roles: [${upperCaseUserRoles.join(', ')}]`,
      );
      this.logger.error(
        `[DELETE_USE_CASE] ‚ùå - Criador: ${desarquivamento.criadoPorId}`,
      );
      this.logger.error(
        `[DELETE_USE_CASE] ‚ùå - Status: ${desarquivamento.status?.value}`,
      );
      throw new Error(
        'Acesso negado: voc√™ n√£o tem permiss√£o para excluir este desarquivamento',
      );
    }

    // Hard delete s√≥ para administradores
    if (permanent && !upperCaseUserRoles.includes('ADMIN')) {
      throw new Error(
        'Acesso negado: apenas administradores podem realizar exclus√£o permanente',
      );
    }

    // N√£o permitir exclus√£o de registros em andamento (verificar novamente para seguran√ßa)
    if (desarquivamento.status.isInProgress()) {
      throw new Error('N√£o √© poss√≠vel excluir desarquivamento em andamento');
    }

    // Verificar regras de neg√≥cio espec√≠ficas
    if (desarquivamento.status.value === 'FINALIZADO') {
      // Apenas admins podem excluir registros conclu√≠dos
      if (!upperCaseUserRoles.includes('ADMIN')) {
        throw new Error(
          'Apenas administradores podem excluir desarquivamentos conclu√≠dos',
        );
      }
    }

    this.logger.log(
      `[DELETE_USE_CASE] ‚úÖ PERMISS√ïES APROVADAS - Usu√°rio pode excluir`,
    );
  }

  private async performSoftDelete(
    desarquivamento: DesarquivamentoDomain,
    userId: number,
  ): Promise<DeleteDesarquivamentoResponse> {
    try {
      const startTime = new Date();
      this.logger.log(
        `[DELETE_USE_CASE] üì¶ Iniciando soft delete para desarquivamento ID: ${desarquivamento.id?.value}`,
      );
      this.logger.log(`[DELETE_USE_CASE] üë§ Usu√°rio executando: ${userId}`);
      this.logger.log(
        `[DELETE_USE_CASE] üïê Timestamp: ${startTime.toISOString()}`,
      );

      // Usar o m√©todo softDelete nativo do TypeORM via reposit√≥rio
      this.logger.log(
        `[DELETE_USE_CASE] üîÑ Executando softDelete via reposit√≥rio TypeORM...`,
      );

      await this.desarquivamentoRepository.softDelete(desarquivamento.id);

      const endTime = new Date();
      const duration = endTime.getTime() - startTime.getTime();

      this.logger.log(
        `[DELETE_USE_CASE] ‚úÖ SOFT DELETE EXECUTADO COM SUCESSO!`,
      );
      this.logger.log(
        `[DELETE_USE_CASE] ‚úÖ ID exclu√≠do: ${desarquivamento.id?.value}`,
      );
      this.logger.log(
        `[DELETE_USE_CASE] ‚úÖ NIC/Laudo: ${desarquivamento.numeroNicLaudoAuto || 'N/A'}`,
      );
      this.logger.log(`[DELETE_USE_CASE] ‚úÖ Usu√°rio: ${userId}`);
      this.logger.log(
        `[DELETE_USE_CASE] ‚úÖ Timestamp final: ${endTime.toISOString()}`,
      );
      this.logger.log(`[DELETE_USE_CASE] ‚úÖ Dura√ß√£o: ${duration}ms`);
      this.logger.log(
        `[DELETE_USE_CASE] ‚úÖ Status: Registro movido para lixeira (deleted_at definido)`,
      );
      this.logger.log(
        `[DELETE_USE_CASE] ‚úÖ Resultado: Item n√£o aparecer√° mais nas listagens principais`,
      );
      this.logger.log(`=== FIM DA EXCLUS√ÉO - SUCESSO ===\n`);

      return {
        success: true,
        message: 'Desarquivamento exclu√≠do com sucesso',
        deletedAt: endTime,
      };
    } catch (error) {
      this.logger.error(
        `[DELETE_USE_CASE] ‚ùå ERRO CR√çTICO ao executar soft delete:`,
      );
      this.logger.error(
        `[DELETE_USE_CASE] ‚ùå ID: ${desarquivamento.id?.value}`,
      );
      this.logger.error(`[DELETE_USE_CASE] ‚ùå Usu√°rio: ${userId}`);
      this.logger.error(`[DELETE_USE_CASE] ‚ùå Erro: ${error.message}`);
      this.logger.error(`[DELETE_USE_CASE] ‚ùå Stack: ${error.stack}`);
      this.logger.error(`=== FIM DA EXCLUS√ÉO - ERRO ===\n`);
      throw new Error(`Erro ao excluir desarquivamento: ${error.message}`);
    }
  }

  private async performHardDelete(
    desarquivamento: DesarquivamentoDomain,
  ): Promise<DeleteDesarquivamentoResponse> {
    try {
      const startTime = new Date();
      this.logger.log(
        `[DELETE_USE_CASE] üóëÔ∏è Iniciando HARD DELETE para desarquivamento ID: ${desarquivamento.id?.value}`,
      );
      this.logger.log(
        `[DELETE_USE_CASE] ‚ö†Ô∏è ATEN√á√ÉO: Esta √© uma exclus√£o PERMANENTE e IRREVERS√çVEL`,
      );
      this.logger.log(
        `[DELETE_USE_CASE] üïê Timestamp: ${startTime.toISOString()}`,
      );

      // Executar exclus√£o permanente no reposit√≥rio
      this.logger.log(
        `[DELETE_USE_CASE] üîÑ Executando delete permanente via reposit√≥rio...`,
      );
      await this.desarquivamentoRepository.delete(desarquivamento.id);

      const endTime = new Date();
      const duration = endTime.getTime() - startTime.getTime();

      this.logger.log(
        `[DELETE_USE_CASE] ‚úÖ HARD DELETE EXECUTADO COM SUCESSO!`,
      );
      this.logger.log(
        `[DELETE_USE_CASE] ‚úÖ ID exclu√≠do permanentemente: ${desarquivamento.id?.value}`,
      );
      this.logger.log(
        `[DELETE_USE_CASE] ‚úÖ NIC/Laudo: ${desarquivamento.numeroNicLaudoAuto || 'N/A'}`,
      );
      this.logger.log(
        `[DELETE_USE_CASE] ‚úÖ Timestamp final: ${endTime.toISOString()}`,
      );
      this.logger.log(`[DELETE_USE_CASE] ‚úÖ Dura√ß√£o: ${duration}ms`);
      this.logger.log(
        `[DELETE_USE_CASE] ‚úÖ Status: Registro REMOVIDO PERMANENTEMENTE do banco`,
      );
      this.logger.log(
        `[DELETE_USE_CASE] ‚ö†Ô∏è IMPORTANTE: Esta a√ß√£o N√ÉO PODE ser desfeita`,
      );
      this.logger.log(`=== FIM DA EXCLUS√ÉO PERMANENTE - SUCESSO ===\n`);

      return {
        success: true,
        message: 'Desarquivamento exclu√≠do permanentemente',
        deletedAt: endTime,
      };
    } catch (error) {
      this.logger.error(
        `[DELETE_USE_CASE] ‚ùå ERRO CR√çTICO ao executar hard delete:`,
      );
      this.logger.error(
        `[DELETE_USE_CASE] ‚ùå ID: ${desarquivamento.id?.value}`,
      );
      this.logger.error(`[DELETE_USE_CASE] ‚ùå Erro: ${error.message}`);
      this.logger.error(`[DELETE_USE_CASE] ‚ùå Stack: ${error.stack}`);
      this.logger.error(`=== FIM DA EXCLUS√ÉO PERMANENTE - ERRO ===\n`);
      throw new Error(`Erro ao excluir desarquivamento: ${error.message}`);
    }
  }
}

// Caso de uso para restaurar registros exclu√≠dos (soft delete)
@Injectable()
export class RestoreDesarquivamentoUseCase {
  private readonly logger = new Logger(RestoreDesarquivamentoUseCase.name);

  constructor(
    @Inject(DESARQUIVAMENTO_REPOSITORY_TOKEN)
    private readonly desarquivamentoRepository: IDesarquivamentoRepository,
  ) {}

  async execute(request: {
    id: number;
    userId: number;
    userRoles: string[];
  }): Promise<{ success: boolean; message: string }> {
    const startTime = new Date();
    this.logger.log(`=== IN√çCIO DA RESTAURA√á√ÉO ===`);
    this.logger.log(
      `[RESTORE_USE_CASE] üîÑ Iniciando restaura√ß√£o de desarquivamento`,
    );
    this.logger.log(`[RESTORE_USE_CASE] üìã ID: ${request.id}`);
    this.logger.log(`[RESTORE_USE_CASE] üë§ Usu√°rio: ${request.userId}`);
    this.logger.log(
      `[RESTORE_USE_CASE] üîë Roles: ${request.userRoles.join(', ')}`,
    );
    this.logger.log(
      `[RESTORE_USE_CASE] üïê Timestamp: ${startTime.toISOString()}`,
    );

    // Validar entrada
    this.logger.log(`[RESTORE_USE_CASE] ‚úÖ Validando entrada...`);
    if (!request.id || request.id <= 0) {
      this.logger.error(`[RESTORE_USE_CASE] ‚ùå ID inv√°lido: ${request.id}`);
      throw new Error('ID deve ser um n√∫mero inteiro positivo');
    }

    if (!request.userId || request.userId <= 0) {
      this.logger.error(
        `[RESTORE_USE_CASE] ‚ùå ID do usu√°rio inv√°lido: ${request.userId}`,
      );
      throw new Error('ID do usu√°rio √© obrigat√≥rio');
    }

    if (!request.userRoles || !Array.isArray(request.userRoles)) {
      this.logger.error(
        `[RESTORE_USE_CASE] ‚ùå Roles inv√°lidas: ${request.userRoles}`,
      );
      throw new Error('Roles do usu√°rio s√£o obrigat√≥rias');
    }
    this.logger.log(`[RESTORE_USE_CASE] ‚úÖ Entrada validada com sucesso`);

    // Buscar desarquivamento (incluindo soft-deleted)
    this.logger.log(
      `[RESTORE_USE_CASE] üîç Buscando desarquivamento ID: ${request.id} (incluindo exclu√≠dos)`,
    );
    const desarquivamentoId = DesarquivamentoId.create(request.id);
    const desarquivamento =
      await this.desarquivamentoRepository.findByIdWithDeleted(
        desarquivamentoId,
      );

    if (!desarquivamento) {
      this.logger.error(
        `[RESTORE_USE_CASE] ‚ùå Desarquivamento n√£o encontrado: ID ${request.id}`,
      );
      throw new Error(`Desarquivamento com ID ${request.id} n√£o encontrado`);
    }
    this.logger.log(
      `[RESTORE_USE_CASE] ‚úÖ Desarquivamento encontrado: ${desarquivamento.numeroNicLaudoAuto || 'N/A'}`,
    );

    // Verificar se est√° exclu√≠do
    this.logger.log(`[RESTORE_USE_CASE] üîç Verificando se est√° exclu√≠do...`);
    if (!desarquivamento.isDeleted()) {
      this.logger.error(
        `[RESTORE_USE_CASE] ‚ùå Desarquivamento n√£o est√° exclu√≠do: ID ${request.id}`,
      );
      throw new Error('Desarquivamento n√£o est√° exclu√≠do');
    }
    this.logger.log(
      `[RESTORE_USE_CASE] ‚úÖ Desarquivamento est√° exclu√≠do e pode ser restaurado`,
    );

    const upperCaseUserRoles = request.userRoles.map(role =>
      role.toUpperCase(),
    );
    // Verificar permiss√µes (apenas admins e operadores podem restaurar)
    this.logger.log(
      `[RESTORE_USE_CASE] üîê Verificando permiss√µes de restaura√ß√£o...`,
    );
    if (
      !upperCaseUserRoles.includes('ADMIN') &&
      !upperCaseUserRoles.includes('NUGECID_OPERATOR')
    ) {
      this.logger.error(
        `[RESTORE_USE_CASE] ‚ùå Permiss√£o negada para usu√°rio ${request.userId} com roles: ${request.userRoles.join(', ')}`,
      );
      throw new Error(
        'Acesso negado: voc√™ n√£o tem permiss√£o para restaurar desarquivamentos',
      );
    }
    this.logger.log(`[RESTORE_USE_CASE] ‚úÖ Permiss√µes verificadas com sucesso`);

    try {
      this.logger.log(
        `[RESTORE_USE_CASE] üîÑ Executando restaura√ß√£o no banco de dados...`,
      );
      this.logger.log(`[RESTORE_USE_CASE] üìã ID: ${request.id}`);
      this.logger.log(
        `[RESTORE_USE_CASE] üè∑Ô∏è NIC/Laudo: ${desarquivamento.numeroNicLaudoAuto || 'N/A'}`,
      );

      // Restaurar registro usando o m√©todo restore do reposit√≥rio TypeORM
      await this.desarquivamentoRepository.restore(desarquivamentoId);

      const endTime = new Date();
      const duration = endTime.getTime() - startTime.getTime();

      this.logger.log(
        `[RESTORE_USE_CASE] ‚úÖ RESTAURA√á√ÉO EXECUTADA COM SUCESSO!`,
      );
      this.logger.log(`[RESTORE_USE_CASE] ‚úÖ ID restaurado: ${request.id}`);
      this.logger.log(
        `[RESTORE_USE_CASE] ‚úÖ NIC/Laudo: ${desarquivamento.numeroNicLaudoAuto || 'N/A'}`,
      );
      this.logger.log(`[RESTORE_USE_CASE] ‚úÖ Usu√°rio: ${request.userId}`);
      this.logger.log(
        `[RESTORE_USE_CASE] ‚úÖ Timestamp final: ${endTime.toISOString()}`,
      );
      this.logger.log(`[RESTORE_USE_CASE] ‚úÖ Dura√ß√£o: ${duration}ms`);
      this.logger.log(
        `[RESTORE_USE_CASE] ‚úÖ Status: Registro restaurado (deleted_at removido)`,
      );
      this.logger.log(
        `[RESTORE_USE_CASE] ‚úÖ Resultado: Item voltar√° a aparecer nas listagens principais`,
      );
      this.logger.log(`=== FIM DA RESTAURA√á√ÉO - SUCESSO ===\n`);

      return {
        success: true,
        message: 'Desarquivamento restaurado com sucesso',
      };
    } catch (error) {
      this.logger.error(
        `[RESTORE_USE_CASE] ‚ùå ERRO CR√çTICO ao executar restaura√ß√£o:`,
      );
      this.logger.error(`[RESTORE_USE_CASE] ‚ùå ID: ${request.id}`);
      this.logger.error(`[RESTORE_USE_CASE] ‚ùå Usu√°rio: ${request.userId}`);
      this.logger.error(`[RESTORE_USE_CASE] ‚ùå Erro: ${error.message}`);
      this.logger.error(`[RESTORE_USE_CASE] ‚ùå Stack: ${error.stack}`);
      this.logger.error(`=== FIM DA RESTAURA√á√ÉO - ERRO ===\n`);
      throw new Error(`Erro ao restaurar desarquivamento: ${error.message}`);
    }
  }
}
